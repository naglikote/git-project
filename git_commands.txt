# Глобальное задание имени позлзователя  и его адреса почты, если требуется локально изменить имя пользователя: не задавать ключ --global
	git config --global user.name "name"
	git config --global user.email "name"
# Просмотр всех конфигурационных данных
	git config --list
# Создания репозитория в текущей папки
	git init
# Игнорирование файлов. Задание гиту фалов, которые не нужно включать в репозиторий.
Создаем в папке реозитория текстовой файл с именем ".gitignore". Открываем txt файл и сохраняем его с ращирением alltype.
В файле ".gitignore" исключения задаются в следующим виде:
	#исключение целой папки, включая все содержимое
	folder/
	#исключение не всей папки, а файлов в ней с определенным расширением 
	folder/*.<расширение> (например docs/*.txt)
# Текущий статус проекта 
	 git status
# Команда для перехода между папками
	cd <name>
# Индексирование фалов для commit (начать track за файлом для последующего комита) 
	git add <name> 
# Иниациационное добавление в track (первое, массовое, всей кучей) 
	git add .
# Удаления файла из под присмотра gita( из под трека). В случае когда закинули лишний файл в трек.
	git rm --catched <file>
# Commit файла. Ключ -m позволяет прикрепить сообщения коммита, в слючае если его не указать откроется редактор текста, вкотором можно указать сообщения комита. 
  Если вместо <name> указать ключ -a, гит закомитет все проинициализированные файлы. 
	git commit <name> -m"<mesage>"
	git commit -a -m"<mesage>"
# История коммитов (что бы выйти из журнала комитов нужно нажать q)
	git log 
# Компактный вывод логов 
	git log --pretty=format:"%h - %an, %ar : %s"
# Просмотр логов коммитов за определенное время (ключ --since=<> )
	git log --since=<> ( например: git log --since=2.weeks , покажет логи за 2 недели )
# Просмотр логов изменений в файле ( ключ -p), { Данная команда показывает внесенные изменения в файлы}. Задания колличества логов для просмотра, начиная с последнего (ключ -n, где n число логов)
	git log -p -n ( Например: git log -p -2 , покажет логи изменений в  2 последних файлах) 
# Создание новой ветки.
	git branch <name>
# Создание новой ветки и переход на нее. 
	git checkout -b <name>
# Просмотр существующих веток в репозитории. ( ключ -v , позволяет увидеть более подробную информацию {последние комиты})
	git branch
	git branch -v
# Переключение между ветками. 
	git checkout <name_branch>
# Слияние(merge) веток. ( в начале лучше мержить на не боевую ветку, разрешить все конфликты и уже потом мержить на основную)
	git merge <name_branch> (name_branch имя ветки которую мы заливаем в свою текущуую ветку)
#  Запуск утилиты для разрешения кофликтов при слиянии веток ( При запуске kdiff3 мы видим три окна. Первое окно - общий предок, что было до того как появились первые изменения.
Второе окно - что у нас находится в локальной ветке. Третье окно - то что пришло при слиянии. Красное - это различия в данных и мы можем взять либо данные от второго окна, либо данные от третьего окна, либо их совместить, либо взять данные предка.
Если нажать на кнопку авто, находящуюся свеху от трех окон, то утилита попробует сама смержить ветки. В случае если это не удастся, потребуется сделать это вручную. 
Нажав на 4 кнопку ( находится после кнопки принтера) мы перейдем на текущую строку, которую будем мержить. Активируются три кнопки " A B C" и кликая по этим кнопкам мы получаем результат, что у нас будет в смержаном варианте.) 
Если все конфликты разрешены, нажимае дискету. Если она не активирована, значит не все древо конфликтов разрешенно. Жмем стрелки и ищем. По итогу в папке с файлом будет куча бекапов, если у нас все хорошо их можно всех удалить)
	git mergetool
			# Команды для устанвоки утилиты kdiff3 (утилита для merge веток, лежит на http://kdiff3.sourceforge.net/)
				git config --global merge.tool kdiff3
				git config --global mergetool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
				git config --global mergetool.kdiff3.trustExitCode false
# Добавление локального рипозитория на github.( следуем инструкции на гит хаба or push an existing repository from the command line)
 git remote add origin https://github.com/naglikote/<>.git
 remote add мы говорим гиту что сейчас будем добавлять новый репозиторий.
 origin мы указаваем псевдоним, скорошенное название ропозитория( пишем что угодно)
  https://github.com/naglikote/<>.git путь к репозиторию на гит хаб 
#  Просмотр имеющихся удаленных репозиториев (если добавить ключ -v , увидем откуда и куда мы будем класть) 
	git remote 
	git remote -v
# Отправка закомиченных изменений на удаленный репозиторий.
	git push -u origin master
	#push проталкивает все закомиченные изменения в удаленку
	#origin мы будем толкать сюда 
	#master проталкивать мы будем эту ветку
	#-u ключ задающий push по умполчанию, в следующий раз когда будем пушить он сразу будет толкать на master. В о дальнейшей работы его не пишем. 
	git push 
# Настрока пуша для проталкивания одной ветки или всех имеющихся, которые соответствуют веткам на удаленке
	git config --global push.default matching (все ветки)
	git config --global push.default sinple (толкает текущую ветку) 
# Клонирование удаленного репозитория.
	git clone <https clone utl> ( пример: git clone https://github.com/naglikote/MyAwosmeProkect{.git})
# Скачивание последних изменений с удаленного репозитория 
	git fetch
# Установка последних изменений на локальный репозиторий 
	git pull
	
	